set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

set tabstop=4
set shiftwidth=4
set smarttab
set ai
set number

if has("gui_running")
  set lines=999 columns=999
else
   if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif

set guioptions-=T
set guioptions-=m


if has('gui')
  colorscheme molokai 
  set guifont=Consolas:h12:cRUSSIAN::
else
  set guifont=Terminus\ 14
endif

"set encoding=utf-8                                  " set charset translation encoding !!! не работает
set termencoding=utf-8                              " set terminal encoding
set fileencoding=utf-8                              " set save encoding
set fileencodings=utf8,koi8r,cp1251,cp866,ucs-2le   " список предполагаемых кодировок, в порядке предпочтения

set wildmenu
set wcm=<Tab>
menu Exit.quit     :quit<CR>
menu Exit.quit!    :quit!<CR>
menu Exit.save     :exit<CR>
map <F10> :emenu Exit.<Tab>

"if has('win32')
"set makeprg=nmake
"compiler msvc
"else
"set makeprg=mingw32-make
"compiler gcc
"endif

map <F3> : call CompileGcc()<CR>
func! CompileGcc()
  exec "w"
  exec "!gcc % -o %<"
endfunc

map <F4> :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec "w"
  exec "!g++ % -o %<"
  exec "! %<"
endfunc

imap  <F5> :call CompileCpp()<CR> 
map <F5> :call CompileCpp()<CR>
func! CompileCpp()
  exec "w"
  exec "!clang++ % -std=c++0x -o %<"
endfunc

"au FileType C set makeprg=gcc\ %
"au FileType Cpp set makeprg=g++\ %

map <C-o> :browse e<CR>

" Clang_complete section
" {{{ clang complete - Use of Clang for completing C, C++... : Script Id 3302
" Clang version > 2.8 for c++...
" After	* . , -> and :: => automatically
" 	* <C-X><C-U> => "force" the completion.
" clang	* can detect errors inside your code, and highlight them
" 	* can open the quickfix window automatically.
" When using special flags for a project (especially -I and -D ones), put the flags inside the file
" .clang_complete at the root of your project. 
"
"let g:clang_complete_auto = 1
"let g:clang_complete_copen = 1
"let g:clang_hl_errors = 1
"let g:clang_periodic_quickfix = 0
"let g:clang_snippets = 1
"let g:clang_conceal_snippets = 0
"let g:clang_exec = 'd:\\t\\clang\\bin\\clang.exe'
"let g:clang_user_options = '|| exit 0'
"let g:clang_use_library = 1
"let g:clang_library_path = 'd:\\t\\clang\\bin'
"let g:clang_debug = 0
" }}}

" Задаем собственные функции для назначения имен заголовкам табов -->
    function MyTabLine()
        let tabline = ''


        " Формируем tabline для каждой вкладки -->
            for i in range(tabpagenr('$'))
                " Подсвечиваем заголовок выбранной в данный момент вкладки.
                if i + 1 == tabpagenr()
                    let tabline .= '%#TabLineSel#'
                else
                    let tabline .= '%#TabLine#'
                endif


                " Устанавливаем номер вкладки
                let tabline .= '%' . (i + 1) . 'T'


                " Получаем имя вкладки
                let tabline .= ' %{MyTabLabel(' . (i + 1) . ')} |'
            endfor
        " Формируем tabline для каждой вкладки <--


        " Заполняем лишнее пространство
        let tabline .= '%#TabLineFill#%T'


        " Выровненная по правому краю кнопка закрытия вкладки
        if tabpagenr('$') > 1
            let tabline .= '%=%#TabLine#%999XX'
        endif


        return tabline
    endfunction


    function MyTabLabel(n)
        let label = ''
        let buflist = tabpagebuflist(a:n)


        " Имя файла и номер вкладки -->
            let label = substitute(bufname(buflist[tabpagewinnr(a:n) - 1]), '.*/', '', '')


            if label == ''
                let label = '[No Name]'
            endif


            let label .= ' (' . a:n . ')'
        " Имя файла и номер вкладки <--


        " Определяем, есть ли во вкладке хотя бы один
        " модифицированный буфер.
        " -->
            for i in range(len(buflist))
                if getbufvar(buflist[i], "&modified")
                    let label = '[+] ' . label
                    break
                endif
            endfor
        " <--


        return label
    endfunction


    function MyGuiTabLabel()
        return '%{MyTabLabel(' . tabpagenr() . ')}'
    endfunction


    set tabline=%!MyTabLine()
    set guitablabel=%!MyGuiTabLabel()
" Задаем собственные функции для назначения имен заголовкам табов <--

